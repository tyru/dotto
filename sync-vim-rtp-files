#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

# gnu_compat: --opt="..." is allowed.
# no_bundling: single character option is not bundled.
# no_ignore_case: no ignore case on long option.
use Getopt::Long qw(:config gnu_compat no_bundling no_ignore_case);
use Pod::Usage;
use File::Path qw(mkpath);
use File::Temp ();
use Perl6::Slurp;
use File::Basename qw(dirname);
use File::Spec::Functions qw(catfile rel2abs);
use File::Copy::Recursive qw(rcopy);

### sub ###
sub usage () {
    pod2usage(-verbose => 1);
}

sub tempfile {
    my ($fh, $filename) = File::Temp::tempfile(CLEANUP => 0);
    $fh->close;
    $filename;
}


### main ###
my ($needhelp);
GetOptions(
    'h|help' => \$needhelp,
) or usage;
usage if $needhelp;
usage unless @ARGV;

# For chdir() below, convert to absolute path.
my $dir = rel2abs shift;
mkpath $dir;

my $rtp_path_file = tempfile();
system "vim -S write-runtimepath.vim '$rtp_path_file'";
die "could not write runtimepath to '$rtp_path_file'." unless -f $rtp_path_file;

for my $rtp_path (slurp {chomp => 1}, $rtp_path_file) {
    chdir $rtp_path or do {
        warn "cannot chdir to '$rtp_path'.";
        next;
    };
    # git rev-parse --git-dir:
    #   Check if $rtp_path is git repository.
    my $rtp_file_file = tempfile();
    system <<EOS;
git rev-parse --git-dir >/dev/null 2>&1 && \
git ls-files 2>/dev/null >'$rtp_file_file'
EOS
    for my $rtp_file (slurp {chomp => 1}, $rtp_file_file) {
        my ($src, $dest) = (
            catfile($rtp_path, $rtp_file),
            catfile($dir, $rtp_file)
        );
        mkpath dirname $dest;
        rcopy($src, $dest) or warn "can't copy '$src' to '$dest': $!";
    }
}

__END__

=head1 NAME

    sync-vim-rtp-files - NO DESCRIPTION YET.


=head1 SYNOPSIS


=head1 OPTIONS


=head1 AUTHOR

tyru <tyru.exe@gmail.com>
