#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

use File::Path qw(rmtree);
use File::Spec::Functions qw(catfile);

use FindBin ();
use lib "$FindBin::Bin/lib";
use Dotto::Util;

# gnu_compat: --opt="..." is allowed.
# no_bundling: single character option is not bundled.
# no_ignore_case: no ignore case on long option.
use Getopt::Long qw(:config gnu_compat no_bundling no_ignore_case);



### sub ###

sub usage () {
    die <<EOF;
    Usage: $0 [OPTIONS]

OPTIONS:
    -h, --help                  show this help.
    -u, --username <user>       specify username.
EOF
}



### main ###

# chdir parent directory of this script
chdir $FindBin::Bin or die "$FindBin::Bin:$!";

my $needhelp;
my $home;
my $username;
my $config_file;
my $force = 0;
my $verbose = 0;
GetOptions(
    'h|help'
        => \$needhelp,
    'u|username=s'
        => \$username,
    'c|config-file=s'
        => \$config_file,
    'f|force'
        => \$force,
    'v|verbose'
        => \$verbose,
    'd|directory=s'
        => \$home,
) or usage;
usage if $needhelp;
unless ($force) {
    warn "warning: append -f to delete dotfiles.\n";
    usage;
}


if (defined $home) {
    # nop
}
elsif (defined $username) {
    $home = get_home_from_user $username;
}
else {
    ($username, $home) = determine_user_and_home;
}

if (!defined $config_file && exists $ENV{DOTTORC}) {
    $config_file = $ENV{DOTTORC};
}
my $c = load_config($config_file);

for my $file (map { convert_filename $c, $_ } @{$c->{files}}) {
    $file  = catfile($home, $file);
    print "Deleting $file..." if $verbose;
    rmtree($file);
    print "done.\n" if $verbose;
}
