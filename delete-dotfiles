#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

# gnu_compat: --opt="..." is allowed.
# no_bundling: single character option is not bundled.
# no_ignore_case: no ignore case on long option.
use Getopt::Long qw(:config gnu_compat no_bundling no_ignore_case);
use Pod::Usage;
use File::Path qw(rmtree);
use File::Spec::Functions qw(catfile);

use FindBin ();
use lib "$FindBin::Bin/lib";
use Dotto::Util qw(get_home_from_user determine_user_and_home load_config convert_filename);


sub usage () {
    pod2usage(-verbose => 1);
}


my $needhelp;
my $home;
my $username;
my $config_file;
my $force = 0;
my $verbose = 0;
my $convert_filename = 0;
GetOptions(
    'h|help'
        => \$needhelp,
    'u|username=s'
        => \$username,
    'c|config-file=s'
        => \$config_file,
    'f|force'
        => \$force,
    'v|verbose'
        => \$verbose,
    'd|directory=s'
        => \$home,
    'O|os-files'
        => \$convert_filename,
) or usage;
usage if $needhelp;
unless ($force) {
    warn "warning: append -f to delete dotfiles.\n";
    usage;
}


if (defined $home) {
    # nop
}
elsif (defined $username) {
    $home = get_home_from_user $username;
}
else {
    ($username, $home) = determine_user_and_home;
}

if (!defined $config_file && exists $ENV{DOTTORC}) {
    $config_file = $ENV{DOTTORC};
}
unless (defined $config_file) {
    die "Specify config file with -c option.\n";
}
my $c = load_config($config_file);

my @files = @{$c->{files}};
if ($convert_filename) {
    @files = map { convert_filename $c, $_ } @files;
}
for my $file (@files) {
    $file  = catfile($home, $file);
    print "Deleting $file..." if $verbose;
    rmtree($file);
    print "done.\n" if $verbose;
}



__END__

=head1 NAME

    delete-dotfiles - Delete dotfiles.


=head1 SYNOPSIS

    $ delete-dotfiles [OPTIONS]


=head1 OPTIONS

=over 6

=item -h, --help

Show help.

=item -u {user}, --username {user}

Determine home directory from username.

=item -c {config-file}, --config-file {config-file}

Config file path to get dotfiles list.

=item -f, --force

Do delete actually.

=item -v, --verbose

Output verbose messages.

=item -d {dir}, --directory {dir}

Directory of home directory.
If you want to specify home directory from username,
use C<-u> option.

=back


=head1 AUTHOR

tyru <tyru.exe@gmail.com>
