#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

# gnu_compat: --opt="..." is allowed.
# no_bundling: single character option is not bundled.
# no_ignore_case: no ignore case on long option.
use Getopt::Long qw(:config gnu_compat no_bundling no_ignore_case);
use Pod::Usage;
use File::Path qw(rmtree);
use File::Spec::Functions qw(catfile);
use Perl6::Say;

use FindBin ();
use lib "$FindBin::Bin/lib";
use Dotto::Util qw(get_home_from_user determine_user_and_home load_config convert_filename install);


sub usage () {
    pod2usage(-verbose => 1);
}


my $needhelp;
my $home;
my $username;
my $config_file;
my $verbose;
GetOptions(
    'h|help'
        => \$needhelp,
    'u|username=s'
        => \$username,
    'c|config-file=s'
        => \$config_file,
    'v|verbose'
        => \$verbose,
) or usage;
usage if $needhelp;


if (defined $username) {
    $home = get_home_from_user $username;
}
else {
    ($username, $home) = determine_user_and_home;
}

if (!defined $config_file && exists $ENV{DOTTORC}) {
    $config_file = $ENV{DOTTORC};
}
my $c = load_config($config_file);

for my $file (map { convert_filename $c, $_ } @{$c->{files}}) {
    my $src  = catfile($home, $file);
    my $dest = catfile($c->{directory}, $file);

    say("$src -> $dest") if $verbose;
    install($src, $dest, $username);
}

for my $f (@{$c->{removed_files}}) {
    if (-e $f) {
        rmtree($f);
    }
}



__END__

=head1 NAME

    sync-dotfiles - Copy dotfiles to specified directory.


=head1 SYNOPSIS

    $ sync-dotfiles [OPTIONS]


=head1 OPTIONS

=over 4

=item -h, --help

Show help.

=item -u {user}, --username {user}

Determine home directory from username.

=item -c {config-file}, --config-file {config-file}

Config file path to get dotfiles list.

=item -v, --verbose

Output verbose messages.

=item -d {dir}, --directory {dir}

Directory of home directory.
If you want to specify home directory from username,
use C<-u> option.

=back


=head1 AUTHOR

tyru <tyru.exe@gmail.com>
