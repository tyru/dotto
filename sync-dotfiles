#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

# gnu_compat: --opt="..." is allowed.
# no_bundling: single character option is not bundled.
# no_ignore_case: no ignore case on long option.
use Getopt::Long qw(:config gnu_compat no_bundling no_ignore_case);
use FindBin ();
use Pod::Usage;
use File::Spec::Functions qw(catfile);
use File::Basename qw(dirname);
use Perl6::Say;
use File::Path qw(rmtree);

use lib "$FindBin::Bin/lib";
use Dotto::Util qw(get_user_from_home get_home_from_user determine_user_and_home load_config convert_filename install);


sub usage () {
    pod2usage(-verbose => 1);
}


my $needhelp = 0;
my $home;
my $config_file;
my $dry_run = 0;
my $force_overwrite = 0;
my $username;
my $directory;
my $extract = 0;
my $dereference = 0;
GetOptions(
    'h|help'
        => \$needhelp,
    'u|username=s'
        => \$username,
    'c|config-file=s'
        => \$config_file,
    'dry-run'
        => \$dry_run,
    'f|force'
        => \$force_overwrite,
    'x|extract'
        => \$extract,
    'd|directory=s'
        => \$directory,
    'H|home-directory=s'
        => \$home,
    'L|dereference'
        => \$dereference,
) or usage;
usage if $needhelp;


if (defined $home) {
    $username = get_user_from_home $home;
}
elsif (defined $username) {
    $home = get_home_from_user $username;
}
else {
    ($username, $home) = determine_user_and_home;
}

if (!defined $config_file && exists $ENV{DOTTORC}) {
    $config_file = $ENV{DOTTORC};
}
unless (defined $config_file) {
    die "Specify config file with -c option.\n";
}
my $c = load_config($config_file);
my @files = @{$c->{files}};

if (!defined $directory && exists $c->{directory}) {
    $directory = $c->{directory};
}
unless (defined $directory) {
    warn "error: directory is undefined: please specify with -d {directory}\n";
    usage;
}

# For test, check if file exists before installing.
unless ($force_overwrite) {
    my $exists = 0;
    for my $file (map { convert_filename $c, $_ } @files) {
        my $dest;
        if ($extract) {
            $dest = catfile($home, convert_filename $c, $file);
        }
        else {
            $dest = catfile($directory, $file);
        }
        if (-e $dest) {
            warn "warning: sync-dotfiles: File exists '$dest'.\n";
            $exists = 1;
        }
    }
    exit 1 if $exists;
}

# Install dotfiles to $home.
# but if path $dest exists even if $force_overwrite == 0
# (maybe problem like race condition), exit with error.
for my $file (@files) {
    my ($src, $dest);
    if ($extract) {
        $src  = catfile($directory, $file);
        $dest = catfile($home, convert_filename $c, $file);
    }
    else {
        $src  = catfile($home, $file);
        $dest = catfile($directory, $file);
    }

    if ($dry_run) {
        say "Copy $src -> $dest";
        next;
    }

    if (-e $dest) {
        unless ($force_overwrite) {
            # checked but file exists?
            die "error: sync-dotfiles: File exists '$dest'.\n";
        }
        rmtree($dest);
    }

    install($src, $dest, $username, {dereference => $dereference});
}

unless ($extract) {
    for my $file (@{$c->{ignore_files}}) {
        my $dest = catfile($directory, convert_filename $c, $file);
        if (-e $dest) {
            rmtree($dest);
        }
    }
}




__END__

=head1 NAME

    sync-dotfiles - Copy dotfiles from directory to directory.


=head1 SYNOPSIS

    $ sync-dotfiles [OPTIONS]
    $ sync-dotfiles -x [OPTIONS]


=head1 OPTIONS

=over 9

=item -h, --help

Show help.

=item -u, --username {user}

Owner of copied dotfiles.

=item -c, --config-file {config-file}

Config file path to get dotfiles list.

=item -f, --force

Overwrite dotfiles if they exist.

=item --dry-run

Output verbose messages and do nothing.

=item -x, --extract

Copy dotfiles from C<--directory> to home directory.
if this is not given,
Copy dotfiles from home directory to C<--directory>.

=item -d, --directory {directory}

Directory which contains dotfiles (not home directory).

=item -H, --home-directory {directory}

Directory of home directory.
If you want to specify home directory from username,
use C<-u> option.

=item -L, --dereference

Dereference symlinks if given.

=back


=head1 AUTHOR

tyru <tyru.exe@gmail.com>
