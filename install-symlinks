#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

# gnu_compat: --opt="..." is allowed.
# no_bundling: single character option is not bundled.
# no_ignore_case: no ignore case on long option.
use Getopt::Long qw(:config gnu_compat no_bundling no_ignore_case);
use Pod::Usage qw(pod2usage);
use File::Spec::Functions qw(catfile rel2abs);
use File::Path qw(rmtree);
use Perl6::Say;

use FindBin ();
use lib "$FindBin::Bin/lib";
use Dotto::Util qw(get_home_from_user determine_user_and_home load_config convert_filename install_symlink supported_symlink);


sub usage () {
    pod2usage(-verbose => 1);
}


my $needhelp;
my $directory;
my $home;
my $username;
my $force_overwrite = 0;
my $verbose = 0;
my $config_file;
GetOptions(
    'h|help'
        => \$needhelp,
    'u|username=s'
        => \$username,
    'c|config-file=s'
        => \$config_file,
    'f|force'
        => \$force_overwrite,
    'v|verbose'
        => \$verbose,
    'd|directory=s'
        => \$directory,
    'H|home-directory=s'
        => \$home,
) or usage;
usage if $needhelp;


unless (supported_symlink()) {
    die "error: your platform does not support symbolic link.\n";
}

if (defined $home) {
    $username = get_user_from_home $home;
}
elsif (defined $username) {
    $home = get_home_from_user $username;
}
else {
    ($username, $home) = determine_user_and_home;
}

if (!defined $config_file && exists $ENV{DOTTORC}) {
    $config_file = $ENV{DOTTORC};
}
unless (defined $config_file) {
    die "Specify config file with -c option.\n";
}
my $c = load_config($config_file);
my @files = map { convert_filename $c, $_ } @{$c->{files}};

if (!defined $directory && exists $c->{directory}) {
    $directory = $c->{directory};
}
unless (defined $directory) {
    warn "error: directory is undefined: please specify with -d {directory}\n";
    usage;
}

# Install symbolic links.
for my $file (@files) {
    my $src  = rel2abs(catfile($directory, $file));
    my $dest = catfile($home, $file);

    if (-e $dest) {
        unless ($force_overwrite) {
            # checked but file exists?
            warn "warning: install-symlinks: File exists '$dest'.\n";
            next;
        }
        rmtree($dest);
    }

    say("$src -> $dest") if $verbose;
    install_symlink $src, $dest, $username;
}





__END__

=head1 NAME

    install-symlinks - Install symlinks to home directory.


=head1 SYNOPSIS

    $ install-symlinks -d files/ [OPTIONS]

=head1 OPTIONS

=over 7

=item -h, --help

Show help.

=item -u {user}, --username {user}

Determine home directory from username.

=item -c {config-file}, --config-file {config-file}

Config file path to get dotfiles list.

=item -f, --force

Overwrite dotfiles with symlinks if they exist.

=item -v, --verbose

Output verbose messages.

=item -d {dir}, --directory {dir}

Directory which contains dotfiles (not home directory).

=item -H {dir}, --home-directory {dir}

Directory of home directory.
If you want to specify home directory from username,
use C<-u> option.

=back


=head1 AUTHOR

tyru <tyru.exe@gmail.com>
